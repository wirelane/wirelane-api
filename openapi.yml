openapi: 3.0.1
info:
  title: Wirelane API
  description: |
    ## Basic information

    To use this API, a `client_id` and `client_secret` is needed. Please contact our support to receive one for your app.

    There are two kinds of endpoints: endpoints that are accessible without having an user account on the Wirelane platform, and endpoints that are accessible without. Both need a client_id and client_secret.

    ## Authenticated endpoints

    Retrieving a JWT access token on staging:
    ```
    POST https://oauth-staging.emobilitycloud.com/token
    Content-Type: application/x-www-form-urlencoded
    Accept: application/json

    grant_type=password&client_id=...&client_secret=...&username=...&password=...
    ```
    Retrieving a JWT access token on production:
    ```
    POST https://oauth.emobilitycloud.com/token
    Content-Type: application/x-www-form-urlencoded
    Accept: application/json

    grant_type=password&client_id=...&client_secret=...&username=...&password=...
    ```
    From the returned JSON, take the value of `access_token` and use it in the API request as follows:
    ```
    GET https://api.wirelane.com/apis/emc/organizations/id/dewln/points?page=1&page_size=50
    Accept: application/json
    Authorization: Bearer eyJ0...
    ```

    ## Unauthenticated endpoints

    Retrieving a JWT access token on staging:
    ```
    POST https://oauth-staging.emobilitycloud.com/token
    Content-Type: application/x-www-form-urlencoded
    Accept: application/json

    grant_type=client_credentials&client_id=...&client_secret=...&scope=account
    ```
    Retrieving a JWT access token on production:
    ```
    POST https://oauth.emobilitycloud.com/token
    Content-Type: application/x-www-form-urlencoded
    Accept: application/json

    grant_type=client_credentials&client_id=...&client_secret=...&scope=account
    ```
    From the returned JSON, take the value of `access_token` and use it in the API request.

    ## Host names for the endpoints

    Host names for the API
    - Staging: api-staging.wirelane.com
    - Production: api.wirelane.com
  contact:
    name: Wirelane GmbH
    url: https://www.wirelane.com
    email: support@wirelane.com
  version: "2.0"
  x-logo:
    url: "https://avatars.githubusercontent.com/u/32132867?s=200&amp;v=4"
    backgroundColor: "#151515"
    altText: "Wirelane"
servers:
- url: https://api-staging.wirelane.com/apis/emc
security:
- OAuth2Password:
  - account_admin
paths:
  /organizations/id/{organizationId}/points:
    get:
      tags:
      - Organizations Charge Points
      summary: Get organization charge points
      description: |
        Finding charging points for the account.
      operationId: organizationFindChargingPoints
      parameters:
      - $ref: '#/components/parameters/organizationIdParam'
      - $ref: '#/components/parameters/pageNumberParam'
      - $ref: '#/components/parameters/itemsPerPageParam'
      - $ref: '#/components/parameters/searchStringParam'
      - name: order_by
        in: query
        description: Name for sort
        schema:
          type: string
          enum:
          - evseid
          - status
          - latitude
          - longitude
          - power
          - voltage
          - chargingType
          - plugType
          - country
          - city
          - zipCode
          - creationDate
          - updateDate
          - distance
      - $ref: '#/components/parameters/orderDirectionParam'
      - name: lat
        in: query
        description: Latitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: lon
        in: query
        description: Longitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: distance
        in: query
        description: Search distance in meters
        schema:
          pattern: ^[0-9]*$
          type: string
      - name: south_west_lat
        in: query
        description: Latitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: south_west_lon
        in: query
        description: Longitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: north_east_lat
        in: query
        description: Latitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: north_east_lon
        in: query
        description: Longitude
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: plug_types
        in: query
        description: |
          The plug types.
            * TYPE_1
            * TYPE_1_ATCH: With cable attached
            * TYPE_2
            * TYPE_2_ATCH: With cable attached
            * TYPE_3
            * TYPE_3_ATCH: With cable attached
            * CHADEMO
            * CCS
            * SCHUKO
            * UNKNOWN
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - TYPE_1
            - TYPE_1_ATCH
            - TYPE_2
            - TYPE_2_ATCH
            - TYPE_3
            - TYPE_3_ATCH
            - CHADEMO
            - CCS
            - SCHUKO
            - UNKNOWN
            - ""
      - name: status
        in: query
        description: |
          Status of the points. If one point in the station hits the requested status the entire station is returned.
            * FREE: Point is free.
            * IN_USE: Point is used by a card (might also be reserved).
            * UNAVAILABLE: Point is unavailable right now. Might not be installed or broken.
            * UNKNOWN: The point status is unknonwn.
            * FAULTED: Point is faulted or temporary faulted.
            * RESERVED: The point is reserved.
            * CLOSED: The point status is closed (the point is not in use anymore).
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: charging_type
        in: query
        description: |
          The charging type.
            * AC
            * DC
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - AC
            - DC
            - ""
      - name: auth_type
        in: query
        description: |
          The charging station authorization type.
            * card
            * remote
            * direct
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            enum:
            - card
            - remote
            - direct
            - ""
      - name: max_power
        in: query
        description: |
          The charging speed. Greater than 0
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: infrastructure_only
        in: query
        description: To exchange only infrastructure specific data
        schema:
          pattern: ^[0-1]{1}$
          type: string
      - name: point_groups
        in: query
        description: Search for specific point groups
        style: form
        explode: false
        schema:
          type: array
          items:
            pattern: ^[0-9]+$
            type: string
      - name: evseid
        in: query
        description: Filter by list of evseids
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: sort_lat
        in: query
        description: Latitude for sortable
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: sort_lon
        in: query
        description: Longitude for sortable
        schema:
          pattern: ^[-+]?[0-9]*.?[0-9]+$
          type: string
      - name: reservable
        in: query
        description: To exchange only reservable points
        schema:
          pattern: ^[0-1]{1}$
          type: string
      - name: charging_station_id
        in: query
        description: Filter by list of charging station id's
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: owner_id
        in: query
        description: Filter by list of owner_id
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: not_in_point_groups
        in: query
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: List of found charging points
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
            X-Total-Pages:
              $ref: '#/components/headers/X-Total-Pages'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargingPoint'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    post:
      tags:
      - Organizations Charge Points
      summary: Create organization charge point
      description: Create a charging point for the provider of the organization.
      operationId: organizationCreateChargingPoint
      parameters:
      - $ref: '#/components/parameters/organizationIdParam'
      requestBody:
        description: Create a charging point
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargingPoint'
        required: true
      responses:
        200:
          description: Created. Returns created charging point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingPoint'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /organizations/id/{organizationId}/points/{pointTypeId}/{pointId}:
    get:
      tags:
      - Organizations Charge Points
      summary: Get one point from organization
      description: |
        Get a single charging point by their charging point evseId
      operationId: organizationFindChargingPoint
      parameters:
      - $ref: '#/components/parameters/organizationIdParam'
      - name: pointTypeId
        in: path
        description: |
          Sets which field of ChargingPoint the `pointId` parameters refers to:
            * `id` / `charging_point_id`: The internal ID of the EVSE
            * `evseid`: The Roaming EVSE ID
            * `charge_point_id`: The technical ID of the charge point connector. Shown to the user, and could be printed on the label (label code)
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-_]+$
          type: string
          enum:
          - id
          - evseid
          - charging_point_id
          - charge_point_id
      - name: pointId
        in: path
        description: The ID to search for. Note that not all characters indicated
          by the pattern are allowed for each type of ID; e.g., the asterisk is only
          allowed if an EVSE ID is provided.
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-_*]+$
          type: string
      responses:
        200:
          description: |
            Charge point found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingPoint'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
      - Organizations Charge Points
      summary: Update organization charge point
      description: Update a charging point for the provider of the organization.
      operationId: organizationUpdateChargingPoint
      parameters:
      - $ref: '#/components/parameters/organizationIdParam'
      - name: pointTypeId
        in: path
        description: |
          Sets which field of ChargingPoint the `pointId` parameters refers to:
            * `id` / `charging_point_id`: The internal ID of the EVSE
            * `evseid`: The Roaming EVSE ID
            * `charge_point_id`: The technical ID of the charge point connector. Shown to the user, and could be printed on the label (label code)
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-_]+$
          type: string
          enum:
          - id
          - evseid
          - charging_point_id
          - charge_point_id
      - name: pointId
        in: path
        description: The ID to search for. Note that not all characters indicated
          by the pattern are allowed for each type of ID; e.g., the asterisk is only
          allowed if an EVSE ID is provided.
        required: true
        schema:
          pattern: ^[a-zA-Z0-9-_*]+$
          type: string
      requestBody:
        description: Create a charging point
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargingPoint'
        required: true
      responses:
        200:
          description: Updated. Returns updated charging point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingPoint'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /organizations/id/{organizationId}/sessions:
    get:
      tags:
        - Organizations Sessions
      summary: Get charging sessions of the organization
      description: |
        Get charging sessions conducted on the organization infrastructure
      operationId: findOrganizationChargingSessions
      parameters:
        - $ref: '#/components/parameters/organizationIdParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/itemsPerPageParam'
        - $ref: '#/components/parameters/searchStringParam'
        - $ref: '#/components/parameters/chargingPointIdParam'
        - $ref: '#/components/parameters/chargingSessionStatusParam'
        - $ref: '#/components/parameters/datePickerSinceParam'
        - $ref: '#/components/parameters/datePickerUntilParam'
        - $ref: '#/components/parameters/sessionOrderByParam'
        - $ref: '#/components/parameters/orderDirectionParam'
        - $ref: '#/components/parameters/organizationTypeParam'
        - $ref: '#/components/parameters/chargePointIdListParam'
        - $ref: '#/components/parameters/ownerIdListParam'
      responses:
        200:
          description: Returns charging sessions of the organization.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargingSession'
          headers:
            X-Total-Count:
              $ref: '#/components/headers/X-Total-Count'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
  /organizations/id/{organizationId}/sessions/id/{sessionId}:
    get:
      tags:
        - Organizations Sessions
      summary: Get one session from organization
      description: |
        Get a single charging session conducted on the organization infrastructure
      operationId: findOrganizationChargingSession
      parameters:
        - $ref: '#/components/parameters/organizationIdParam'
        - $ref: '#/components/parameters/sessionIdParam'
      responses:
        200:
          description: Return specific charging session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargingSession'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        500:
          $ref: '#/components/responses/500'
components:
  schemas:
    OpeningHours:
      type: object
      properties:
        label:
          type: string
          description: Arbitrary label to give the availability.
          example: Mon-Fr 08:00-22:00, Sat-Sun CLOSED
        open247:
          type: boolean
          description: Is available 24/7. If true, Monday - Sunday times will be ignored.
          example: false
        monday:
          type: array
          description: Start and end time pairs representing availability on Mondays.
          example:
          - - "0900"
            - "1230"
          - - "1330"
            - "0000"
          items:
            type: array
            items:
              type: string
        tuesday:
          type: array
          description: Start and end time pairs representing availability on Tuesdays.
          example:
            - - "0000"
              - "0000"
          items:
            type: array
            items:
              type: string
        wednesday:
          type: array
          description: Start and end time pairs representing availability on Wednesdays.
          example:
          - - "0900"
            - "1230"
          - - "1330"
            - "0000"
          items:
            type: array
            items:
              type: string
        thursday:
          type: array
          description: Start and end time pairs representing availability on Thursdays.
          example:
          - - "0000"
            - "0000"
          items:
            type: array
            items:
              type: string
        friday:
          type: array
          description: Start and end time pairs representing availability on Fridays.
          example:
          - - "0900"
            - "1230"
          - - "1330"
            - "1645"
          - - "1800"
            - "0000"
          items:
            type: array
            items:
              type: string
        saturday:
          type: array
          description: Start and end time pairs representing availability on Saturdays.
          example:
          - - "0000"
            - "0000"
          items:
            type: array
            items:
              type: string
        sunday:
          type: array
          description: Start and end time pairs representing availability on Sundays.
          example: []
          items:
            type: array
            items:
              type: string
        exceptionalOpenings:
          type: object
          properties: {}
          description: Start and end time pairs representing availability on specific
            dates. Dates in Y-m-d format. * can be used as year, month or day wildcards
            to represent recurring dates.
          example:
            2020-12-24:
            - - "0000"
              - "0900"
            - - "0930"
              - "1300"
            '*-12-25': []
            '*-12-26': []
    HttpError:
      type: object
      properties:
        error_code:
          type: string
          description: The error code describing the error
          example: validation_error
        error_message:
          type: string
          description: The human readable error message describing the error
          example: Provided data is not valid
    ChargingPointGroup:
      type: object
      properties:
        id:
          type: integer
          description: The internal ID of the charging point group
          example: 1
        name:
          type: string
          description: The group name
          example: AC Chargers
        owner:
          type: string
          example: WIRELANE-2500781
    ChargingPoint:
      type: object
      required:
      - charge_point_id
      properties:
        id:
          type: string
          description: The internal ID of the EVSE (not to be displayed). The same
            value as `charging_point_id`. This value is generated by the Wirelane
            backend when the charge point is initially submitted.
          readOnly: true
          example: 00eb08a9b45c69a4f9f14982a0095e12
        charging_point_id:
          type: string
          description: The internal ID of the EVSE (not to be displayed). The same
            value as `id`. This value is generated by the Wirelane backend when the
            charge point is initially submitted.
          readOnly: true
          example: 00eb08a9b45c69a4f9f14982a0095e12
        charging_station_id:
          type: string
          description: An optional user-defined ID to group different charging points
            into one logical station. Used for grouping in some apps.
          example: 98fd4f3a554f33c12eca9b5e2e4b369a
        charge_point_id:
          type: string
          description: The technical ID of the charge point connector. Shown to the
            user, and could be printed on the label (label code)
          example: 00eb08a9b45c69a4f9f14982a0095e12
        evseid:
          type: string
          description: The EVSE ID used for roaming.
          example: DESGDE000801
        display_id:
          type: string
          example: RED_LEFT
        owner:
          type: string
          description: The owner of the charging station.
          example: WIRELANE-2500781
        emp:
          type: string
          description: Name of the Emobility provider. [Deprecated]
          example: desgd
        cpo:
          type: string
          description: Name of the Charge Point Operator
          example: desgd
        plug_types:
          type: array
          description: Up to four types of plugs.
          example:
          - TYPE_2
          - SCHUKO
          items:
            type: string
            enum:
            - TYPE_1
            - TYPE_1_ATCH
            - TYPE_2
            - TYPE_2_ATCH
            - TYPE_3
            - TYPE_3_ATCH
            - CHADEMO
            - CCS
            - SCHUKO
            - UNKNOWN
        charging_type:
          type: string
          description: Electricity type (AC or DC)
          enum:
          - AC
          - DC
        model:
          type: string
          description: Name of the charge point model
        serial_number:
          type: string
          description: The serial number
        current:
          type: integer
          description: Current in Ampere
        power:
          type: number
          description: Power in kWh
          format: double
          example: 22.0
        voltage:
          type: integer
          description: Voltage in V
          example: 230
        reservable:
          type: boolean
          description: If this charging point supports reservations
          example: true
        authentication_types:
          type: array
          description: Authentication method for the charging point
          example:
          - card
          - remote
          - nfc_terminal
          - direct
          items:
            type: string
            enum:
            - card
            - remote
            - nfc_terminal
            - direct
        status:
          type: string
          description: |
            Status of the points. If one point in the station hits the requested status the entire station is returned.  (Comma Separated List)
              * FREE : Point is free.
              * IN_USE :  Point is used by a card (might also be reserved).
              * UNAVAILABLE : Point is unavailable right now. Might not be installed or broken.
              * UNKNOWN : The point status is unknonwn.
              * FAULTED : Point is faulted or temporary faulted.
              * RESERVED : The point is reserved.
              * CLOSED : The point status is closed (the point is not in use anymore).
          enum:
          - FREE
          - IN_USE
          - UNAVAILABLE
          - UNKNOWN
          - FAULTED
          - RESERVED
          - CLOSED
        country:
          type: string
          description: In ISO 3166-1 alpha-2
          example: DE
        city:
          type: string
          example: Schwäbisch Gmünd
        zip_code:
          type: string
          example: "73525"
        street:
          type: string
          example: Honiggasse
        house_number:
          type: string
          example: "21"
        opening_hours:
          type: string
          description: '@deprecated - use availability instead. Label describing charging
            point availability.'
          example: Mo-Fr 09:00 - 20:00
        availability:
          type: object
          description: Availability of charging point
          allOf:
          - $ref: '#/components/schemas/OpeningHours'
        timezone:
          type: string
          description: Timezone of charging point.
          example: Europe/Berlin
        service_hotline:
          type: string
          description: The telephone number of the service hotline
          example: 8.00557788E8
        longitude:
          type: number
          description: Longitude of the charging point (WGS 84)
          format: float
          example: 9.79944
        latitude:
          type: number
          description: Latitude of the charging point (WGS 84)
          format: float
          example: 48.8026
        distance:
          type: number
          description: Is returned when searching for charging points and providing
            a center
          format: float
          example: 1002.23
        creation_date:
          type: string
          description: ISO 8601
          format: date-time
          readOnly: true
        update_date:
          type: string
          description: ISO 8601
          format: date-time
          readOnly: true
        payment_url:
          type: string
          example: https://www.wirelane.com/laydepay
        charging_provider:
          type: string
          description: If the charging point is using the Wirelane backend or a delegated
            backend, use "emc".
          readOnly: true
          example: emc
        charging_group:
          type: array
          items:
            $ref: '#/components/schemas/ChargingPointGroup'
    ChargingSession:
      type: object
      required:
      - customer_id
      - owner
      - emp
      - session_id
      - cpo_session_id
      - charging_point_id
      properties:
        session_id:
          type: string
          description: Internal session id
        cpo_session_id:
          type: string
          description: Charging session id of the CPO
          example: 19eea288-1ee1-5aa9-b258-38fea1df55f3
        customer_id:
          type: string
          example: WIRELANE-7900915
        customer_email:
          type: string
          format: email
          example: customer@example.com
        customer_membership_owner:
          type: string
          example: wirelane
        card_number:
          type: string
          example: WIRELANE123456
        card_short_reference:
          type: string
          example: CarXYZ
        language:
          description: '[ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code.'
          type: string
          example: de
        charging_station_id:
          type: string
          example: 98fd4f3a554f33c12eca9b5e2e4b369a
        charging_point_id:
          type: string
          example: 00eb08a9b45c69a4f9f14982a0095e12
        charge_point_id:
          type: string
          example: DESGDE000801-2
        evseid:
          type: string
          example: DESGDE000801
        owner:
          description: Charging point owner
          type: string
          example: WIRELANE-2500781
        emp:
          description: E-Mobility Service Provider
          type: string
          example: desgd
        cpo:
          description: Charging point operator
          type: string
          example: eclearing
        charging_provider:
          description: Charging point provider
          type: string
          example: wirelane
        plug_type:
          type: string
          example: TYPE_2
        charging_type:
          type: string
          enum:
          - AC
          - DC
        country:
          type: string
          description: '[ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.'
          example: DE
        city:
          type: string
          example: Schwäbisch Gmünd
        zip_code:
          type: string
          example: 73525
        street:
          type: string
          example: Honiggasse
        house_number:
          type: string
          example: 21
        tariff:
          type: string
          description: The tariff name for the charging session
          example: LADEPAY_01
        tariff_text:
          type: string
          description: The description text for the tariff
        price_model:
          type: string
          description: The price model key for the charging session
          example: desgd_ladepay_01
        price_model_text:
          type: string
          description: The description text for the price model
        identification:
          type: string
          description: The identification value
          example: e6f252d6-30a0-5416-8533-126335a2ad2d
        identification_type:
          type: string
          description: The identification type
          enum:
          - access_token
          - none_access_token
          - auth_token
          - contract_id
          - customer_id
          - rfid
          - contactless_payment
          - direct_payment
          - customer_rfid
          - admin_remotestart
          example: access_token
        cpo_created:
          type: boolean
          description: True if initialized by the cpo
          example: true
        process_begin:
          type: string
          format: date-time
          description: Process start on the platform
          example: 2017-10-15T16:44:45+0200
        process_end:
          type: string
          format: date-time
          description: Process end on the platform
          example: 2017-10-15T17:53:04+0200
        transaction_begin:
          type: string
          format: date-time
          description: Begin date of the transaction delivered by CPO (ideally first interaction between car and charging point)
          example: 2017-10-15T16:44:40+0200
        transaction_end:
          type: string
          format: date-time
          description: End date of the transaction delivered by CPO (ideally last interaction between car and charging point)
          example: 2017-10-15T17:52:59+0200
        session_begin:
          type: string
          format: date-time
          description: Begin date of the charging session delivered by CPO (ideally when current started flowing)
          example: 2017-10-15T16:44:40+0200
        session_end:
          type: string
          format: date-time
          description: End date of the charging session delivered by CPO (ideally when current stopped flowing)
          example: 2017-10-15T17:52:59+0200
        transaction_duration:
          type: integer
          description: Duration of the transaction in minutes
          example: 68
        session_duration:
          type: integer
          description: Duration of the session in minutes
          example: 68
        kwh:
          type: number
          format: double
          example: 17.46
        has_signed_value:
          type: boolean
          example: true
        price:
          type: number
          format: double
          description: The charging session gross price
          example: 1.7
        tax_rate:
          type: number
          format: double
          description: The charging session tax rate
          example: 0.19
        currency:
          description: '[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.'
          type: string
          enum:
          - EUR
          - CHF
          - SEK
          - ILS
          example: EUR
        charging_session_type:
          type: string
          description: The service type provided
          deprecated: true
          enum:
          - direct_charging
          - comfort_charging
          - charging
          example: comfort_charging
        status:
          description: The charging session status
          type: string
          enum:
          - initial
          - authorization_pending
          - start_accepted
          - start_pending
          - started
          - stop_accepted
          - stop_pending
          - stopped
          - closed
          - canceled
          - error
          - error_consecutive_start
          example: closed
        charging_state:
          description: Charging status of the session
          type: string
          enum:
          - charging
          - charge_suspended
          - ending_charge
          - end_charge
        creation_date:
          type: string
          format: date-time
          description: Creation date
          example: 2017-10-15T16:44:40+0200
        update_date:
          type: string
          format: date-time
          description: Update date
          example: 2017-10-15T17:53:04+0200
        meter_start:
          type: integer
          description: Unix timestamp for meter start
          example: 1541678196
        meter_stop:
          type: integer
          description: Unix timestamp for meter stop
          example: 1541678196
        error_code:
          type: string
          description: Error code for faulty session
          example: emc_timeout
        error_message:
          type: string
          description: Error message for faulty session
          example: Manually closed because of time out
  responses:
    400:
      description: Bad Request - Request is somehow wrong
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    401:
      description: User not authorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    403:
      description: Forbidden - The API token is not authorized to perform this request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    404:
      description: Not Found - The resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    406:
      description: Not Acceptable - The format is not supported
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    429:
      description: Too Many Requests - API usage exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    500:
      description: Internal Server Error - Problem with the server. Try again later
        or report it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    503:
      description: Service Unavailable - Temporarily offline for maintenance. Please
        try again later.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    default:
      description: Default response object error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
  parameters:
    organizationIdParam:
      name: organizationId
      in: path
      description: Organization ID
      required: true
      schema:
        pattern: ^[a-zA-Z0-9-_]+$
        type: string
    latParam:
      name: lat
      in: query
      description: Latitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    lonParam:
      name: lon
      in: query
      description: Longitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    sortLatParam:
      name: sort_lat
      in: query
      description: Latitude for sortable
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    sortLonParam:
      name: sort_lon
      in: query
      description: Longitude for sortable
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    distanceParam:
      name: distance
      in: query
      description: Search distance in meters
      schema:
        pattern: ^[0-9]*$
        type: string
    southWestLat:
      name: south_west_lat
      in: query
      description: Latitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    southWestLon:
      name: south_west_lon
      in: query
      description: Longitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    northEastLat:
      name: north_east_lat
      in: query
      description: Latitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    northEastLon:
      name: north_east_lon
      in: query
      description: Longitude
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    pointTypeIdParam:
      name: pointTypeId
      in: path
      description: |
        Sets which field of ChargingPoint the `pointId` parameters refers to:
          * `id` / `charging_point_id`: The internal ID of the EVSE
          * `evseid`: The Roaming EVSE ID
          * `charge_point_id`: The technical ID of the charge point connector. Shown to the user, and could be printed on the label (label code)
      required: true
      schema:
        pattern: ^[a-zA-Z0-9-_]+$
        type: string
        enum:
        - id
        - evseid
        - charging_point_id
        - charge_point_id
    pointIdParam:
      name: pointId
      in: path
      description: The ID to search for. Note that not all characters indicated by
        the pattern are allowed for each type of ID; e.g., the asterisk is only allowed
        if an EVSE ID is provided.
      required: true
      schema:
        pattern: ^[a-zA-Z0-9-_*]+$
        type: string
    searchStringSpecialCharactersParam:
      name: search
      in: query
      description: Context search string
      schema:
        pattern: ^[a-zA-ZÀ-ÿ0-9-_*.,\x27\x20]+$
        type: string
    pointGroupsSearchParam:
      name: point_groups
      in: query
      description: Search for specific point groups
      style: form
      explode: false
      schema:
        type: array
        items:
          pattern: ^[0-9]+$
          type: string
    pointOrderByParam:
      name: order_by
      in: query
      description: Name for sort
      schema:
        type: string
        enum:
        - evseid
        - status
        - latitude
        - longitude
        - power
        - voltage
        - chargingType
        - plugType
        - country
        - city
        - zipCode
        - creationDate
        - updateDate
        - distance
    orderDirectionParam:
      name: order_direction
      in: query
      description: Key for order direction
      schema:
        type: string
        enum:
        - asc
        - desc
        - ""
    evseidListParam:
      name: evseid
      in: query
      description: Filter by list of evseids
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    ownerIdListParam:
      name: owner_id
      in: query
      description: Filter by list of owner_id
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    notInPointGroupsParam:
      name: not_in_point_groups
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    pointGroupsParam:
      name: point_groups
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    chargingStationIdListParam:
      name: charging_station_id
      in: query
      description: Filter by list of charging station id's
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    pageNumberParam:
      name: page
      in: query
      description: Number of current page
      schema:
        type: integer
        default: 1
    itemsPerPageParam:
      name: page_size
      in: query
      description: Number of items per page
      schema:
        type: integer
        default: 50
        minimum: 1
        maximum: 1000000
    infrastructureOnlyParam:
      name: infrastructure_only
      in: query
      description: To exchange only infrastructure specific data
      schema:
        pattern: ^[0-1]{1}$
        type: string
    reservableOnlyParam:
      name: reservable
      in: query
      description: To exchange only reservable points
      schema:
        pattern: ^[0-1]{1}$
        type: string
    chargingTypeParam:
      name: charging_type
      in: query
      description: |
        The charging type. (Comma Separated List)
          * AC
          * DC
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - AC
          - DC
          - ""
    pointStatusParam:
      name: status
      in: query
      description: |
        Status of the points. If one point in the station hits the requested status the entire station is returned.  (Comma Separated List)
          * FREE : Point is free.
          * IN_USE :  Point is used by a card (might also be reserved).
          * UNAVAILABLE : Point is unavailable right now. Might not be installed or broken.
          * UNKNOWN : The point status is unknonwn.
          * FAULTED : Point is faulted or temporary faulted.
          * RESERVED : The point is reserved.
          * CLOSED : The point status is closed (the point is not in use anymore).
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    plugTypesParameter:
      name: plug_types
      in: query
      description: |
        The plug types. (Comma Separated List)
          * TYPE_1
          * TYPE_1_ATCH : With cable attached
          * TYPE_2
          * TYPE_2_ATCH : With cable attached
          * TYPE_3
          * TYPE_3_ATCH : With cable attached
          * CHADEMO
          * CCS
          * SCHUKO
          * UNKNOWN
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - TYPE_1
          - TYPE_1_ATCH
          - TYPE_2
          - TYPE_2_ATCH
          - TYPE_3
          - TYPE_3_ATCH
          - CHADEMO
          - CCS
          - SCHUKO
          - UNKNOWN
          - ""
    authTypesParameter:
      name: auth_type
      in: query
      description: |
        The charging station authorization type. (Comma Separated List)
          * card
          * remote
          * direct
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
          - card
          - remote
          - direct
          - ""
    maxPowerParam:
      name: max_power
      in: query
      description: |
        The charging speed. Greater than 0
      schema:
        pattern: ^[-+]?[0-9]*.?[0-9]+$
        type: string
    searchStringParam:
      name: search
      in: query
      description: Search term
      schema:
        type: string
    chargingPointIdParam:
      name: charging_point_id
      in: query
      description: Charging Point ID
      schema:
        type: string
        pattern: "^[a-zA-Z0-9-_*+]+$"
    chargingSessionStatusParam:
      name: status
      in: query
      description: |
        The charging session status to search for:
          * initial
          * authorization_pending
          * start_accepted
          * start_pending
          * started
          * stop_accepted
          * stop_pending
          * stopped
          * closed
          * canceled
          * error
          * error_consecutive_start
          * ''
      schema:
        type: array
        items:
          type: string
    datePickerSinceParam:
      name: date_picker_since
      in: query
      description: The date time to search from
      schema:
        type: string
        pattern: '^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})[\040+-](\d{4})$'
        format: date-time
    datePickerUntilParam:
      name: date_picker_until
      in: query
      description: The date time to search to
      schema:
        type: string
        pattern: '^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})[\040+-](\d{4})$'
        format: date-time
    sessionOrderByParam:
      name: order_by
      in: query
      description: Name for sort
      schema:
        type: string
        enum:
          - sessionId
          - emp
          - ownerId
          - chargingStationId
          - pointScmId
          - evseid
          - status
          - sessionBegin
          - sessionEnd
          - tariff
          - price
          - kwh
          - chargingSessionType
          - chargingType
          - plugType
          - country
          - city
          - zipCode
          - creationDate
          - updateDate
    organizationTypeParam:
      name: organization_type
      in: query
      description: Type of the organization
      schema:
        type: array
        items:
          type: string
          enum:
            - emp
            - cpo
            - owner
            - ''
    chargePointIdListParam:
      name: charge_point_id
      in: query
      description: Filter by list of charge_point_id
      schema:
        type: array
        items:
          type: string
    sessionIdParam:
      name: sessionId
      in: path
      description: The ID to search for
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
  headers:
    X-Total-Count:
      description: Total number of items
      schema:
        type: integer
    X-Total-Pages:
      description: Total number of pages
      schema:
        type: integer
  requestBodies:
    ChargingPointRequest:
      description: Create a charging point
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChargingPoint'
      required: true
  securitySchemes:
    OAuth2Password:
      type: oauth2
      flows:
        password:
          tokenUrl: https://oauth-staging.emobilitycloud.com/token
          scopes:
            account_admin: Account Admin
    OAuth2ClientCredential:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth-staging.emobilitycloud.com/token
          scopes:
            account: Account function
